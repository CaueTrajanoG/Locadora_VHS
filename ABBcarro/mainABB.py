#from ArvoreBinariaBusca import ArvoreBinaria, No
from BinarySearchTree import BinarySearchTree, Node


arv = BinarySearchTree()
arv.add('A')
arv.add('D')
arv.add('F')
arv.add('G')
arv.add('H')
arv.add('K')
arv.add('M')
arv.add('F')
print('Root: ', arv.getRoot())
print('Len: ', len(arv))
print('Imprimindo em preordem() a arvore completa')
arv.preorder()
print('Busca: ', arv.search('K'))
exit()
print('\nRemove "G"')
arv.deleteNode('G')
arv.preorder()
print('\nRemove "F"')
arv.deleteNode('F')
arv.preorder()
print('\nRemove "H"')
arv.deleteNode('H')
arv.preorder()
print('Root: ', arv.getRoot())
print('\nRemove "A"')
arv.deleteNode('A')
arv.preorder()
print('Root: ', arv.getRoot())
print('\nRemove "D"')
arv.deleteNode('D')
arv.preorder()
print('\nRemove "F"')
arv.deleteNode('F')
arv.preorder()
print('Root: ', arv.getRoot())
print('\nRemove "M"')
arv.deleteNode('M')
arv.preorder()
print('\nRemove "K"')
arv.deleteNode('K')
arv.preorder()
print('Root: ', arv.getRoot())
print('\nLen: ', len(arv))

# print('Remove "A"')
# arv.removeNo('A')
# arv.preordem()

# print('\nBusca "H":', arv.busca('H'))

